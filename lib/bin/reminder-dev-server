#!/usr/bin/env python3

import sys
import argparse
import subprocess

from threading import Event

from tree_guardian import observe


class Handler:

    def __init__(self, stdin=None, stdout=None, stderr=None):
        self._stdin = stdin or sys.stdin
        self._stdout = stdout or sys.stdout
        self._stderr = stderr or sys.stderr

    def write(self, msg: str):
        self._stdout.write(f'{msg}\n')

    def error(self, msg: str):
        self._stderr.write(f'{msg}\n')

    def main(self):
        parser = argparse.ArgumentParser(description='run local development server')
        parser.add_argument('-d', '--debug', dest='debug', action='store_true', help='set debug log level')
        parser.add_argument('--host', dest='host', type=str, default='0.0.0.0', help='server host address')
        parser.add_argument('--port', dest='port', type=int, default=8000, help='server host port')
        args = parser.parse_args()

        def start_server():
            if getattr(Handler, '_sub', None):
                self.write('Restarting server...')
                Handler._sub.kill()
            Handler._sub = subprocess.Popen(
                ['python', 'server/main.py', f'--host={args.host}', f'--port={args.port}'])

        def install_lib():
            sp = subprocess.Popen(['./install.sh'])
            sp.wait()
            start_server()

        install_lib()
        break_event = Event()
        observe(callback=install_lib, path='lib', run_async=True, event=break_event)

        try:
            observe(callback=start_server, path='server')
        except KeyboardInterrupt:
            return 0
        finally:
            break_event.set()

        return 0


if __name__ == '__main__':
    # Setup handler
    handler = Handler()
    sys.exit(handler.main())

